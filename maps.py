# Задание№2
# Написать генераторную функцию с именем deck, которая создаёт упорядоченную колоду карт.
# Функция не принимает аргументы.
# Функция возвращает объект генератор.
#     На каждой итерации или при явном вызове встроенного метода __next__() генератор должен возвращать кортеж из двух элементов:
#         - целое число, обозначающее номинал карты: 2, 3 ... 10, 11 — валет, 12 — дама, 13 — король, 14 — туз
#         - строка, обозначающая масть карты: 'черви', 'бубны', 'пики', 'трефы'
# Колода упорядочивается следующим образом: сначала все номиналы червей, затем все номиналы бубен, затем все номиналы пик и в конце все номиналы треф.
# Написанную функцию необходимо протестировать вручную.
# Пример ручного теста:
#     >>> list(deck())[::13]
#     [(2, 'черви'), (2, 'бубны'), (2, 'пики'), (2, 'трефы')]


from typing import Generator, Tuple

def deck() -> Generator[Tuple[int, str], None, None]:

    suits = ["черви", "бубны", "пики", "трефы"]  # Список мастей карт
    ranks = range(
        2, 15
    )

    for suit in suits:
        for rank in ranks:
            yield (rank, suit)


# Тестирование функции вручную
if __name__ == "__main__":
    card_deck = deck()

    # Печать всех карт для проверки
    for card in card_deck:
        print(card)


