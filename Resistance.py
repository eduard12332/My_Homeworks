# Задание1
# Написать функцию с именем pick_resistors, которая подбирает ближайшие к переданному номиналы сопротивления из всех рядов сопротивлений.
#
# В электротехнике и электронике существует понятие разброса значения сопротивления резистора от номинала. Результатом этого явилось существование рядов номиналов резисторов, изготавливаемых с различной точностью: от ±20% до ±0.5%
#     Подробнее здесь: https://digteh.ru/PCB/R/Nominal/
#
# Необходимо для некоторого (заранее рассчитанного) значения сопротивления подобрать ближайший номинал из каждого ряда сопротивлений. Под ближайшими подразумеваются тот или те номиналы, разница которых с переданным значением сопротивления минимальна.
#     Ряды номиналов, среди которых необходимо осуществить подбор, заданы в словаре в приложенном к заданию файле # ref 1.py
#
# Функция принимает обязательным позиционно-ключевым аргументом целое число — значение сопротивления в диапазоне от 100 до 999 включительно.
#
# Функция возвращает словарь или None.
#
#     Ключи словаря:
#         'Е6', 'Е12', 'Е24', 'Е48', 'Е96'
#
#     Значения словаря должны быть объектами tuple.
#     В каждом кортеже должен быть один или больше объектов int — подобранные номиналы сопротивлений.
#
# В данной задаче необходимо использовать встроенные функции высшего порядка map() и filter(). Для этих функций в свою очередь понадобится написать подходящие анонимные функции.
#
# Примечание: не забывайте про встроенные функции abs() и min()
#
# Написанную функцию необходимо протестировать вручную.
# Пример ручного теста:
#     >>> pick_resistors(112)
#     {'E6': (100,), 'E12': (120,), 'E24': (110,), 'E48': (110,), 'E96': (113,)}
#     >>>
#     >>> pick_resistors(549)
#     {'E6': (470,), 'E12': (560,), 'E24': (560,), 'E48': (536, 562), 'E96': (549,)}

from typing import Dict, Tuple, List, Optional


def pick_resistors(resistance: int) -> Optional[Dict[str, Tuple[int, ...]]]:

    if not (100 <= resistance <= 999):
        return None

    resistor_series: Dict[str, List[int]] = {
        "E6": [100, 150, 220, 330, 470, 680],
        "E12": [100, 120, 150, 180, 220, 270, 330, 390, 470, 560, 680, 820],
        "E24": [ 100, 110,120,130,150,160,180,200,220,240,270,300,330,360,390,430,470,510,560,620,680,750,820,910],

        "E48": [100,105,110,115,121,127,133,140,147,154,162,169,178,187,196,205,215,226,237,249,261,274,287,301,316,332,348,365,383,402,422,442,464,487,511,536,562,590,619,649,681,715,750,787,825,866,909,953],
        "E96": [
            100,
            102,
            105,
            107,
            110,
            113,
            115,
            118,
            121,
            124,
            127,
            130,
            133,
            137,
            140,
            143,
            147,
            150,
            154,
            158,
            162,
            165,
            169,
            174,
            178,
            182,
            187,
            191,
            196,
            200,
            205,
            210,
            215,
            221,
            226,
            232,
            237,
            243,
            249,
            255,
            261,
            267,
            274,
            280,
            287,
            294,
            301,
            309,
            316,
            324,
            332,
            340,
            348,
            357,
            365,
            374,
            383,
            392,
            402,
            412,
            422,
            432,
            442,
            453,
            464,
            475,
            487,
            499,
            511,
            523,
            536,
            549,
            562,
            576,
            590,
            604,
            619,
            634,
            649,
            665,
            681,
            698,
            715,
            732,
            750,
            768,
            787,
            806,
            825,
            845,
            866,
            887,
            909,
            931,
            953,
            976,
        ],
    }

    def find_closest(series: List[int], target: int) -> Tuple[int, ...]:

        min_diff = min(map(lambda x: abs(x - target), series))
        return tuple(filter(lambda x: abs(x - target) == min_diff, series))

    result: Dict[str, Tuple[int, ...]] = {
        series: find_closest(values, resistance)
        for series, values in resistor_series.items()
    }

    return result
# Вывод написанной функцией,  тестирую вручную
print(pick_resistors(470)) #Вывод {'E6': (470,), 'E12': (470,), 'E24': (470,), 'E48': (464,), 'E96': (475,)}
print(pick_resistors(333)) #Вывод {'E6': (330,), 'E12': (330,), 'E24': (330,), 'E48': (332,), 'E96': (332,)}

print(pick_resistors(99)) #Вывод None
print(pick_resistors(1000)) #Вывод None