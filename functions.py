# Задание№3
# Написать функцию высшего порядка с именем math_function_resolver, которая вычисляет округлённые значения для различных математических функций.
#
# Функция принимает обязательным аргументом математическую функцию, произвольное количество значений x для математической функции и необязательным аргументом переключатель: тип вычисляемых значений float или str.
#
#     Математическая функция должна быть строго позиционным аргументом, передаётся в виде вызываемого объекта.
#         Данная функция должна принимать один обязательный позиционно-ключевой аргумент — число x, для которого необходимо вычислить значение математической функции. Это должно быть описано в документации к функции высшего порядка.
#
#     Значения x для математической функции должны быть строго позиционными, передаются в виде произвольного кортежа объектов int или float.
#
#     Переключатель должен быть строго ключевым, передаётся в виде объекта bool, значение по умолчанию False (тип вычисляемых значений float).
#
# Функция возвращает объект списка с вычисленными значениями математической функции для переданных значений x. Значения должны быть математичеси округлены до целого.
#
#     Элементами списка должны быть объекты int или объекты str в зависимости от значения аргумента переключателя.
#
# В данной задаче необходимо минимизировать количество итераций.
#
# Написанную функцию необходимо протестировать вручную.
# Пример ручного теста:
#     >>> math_function_resolver(lambda x: 0.5*x + 2, *range(1, 10))
#     [2, 3, 4, 4, 4, 5, 6, 6, 6]
#     >>>
#     >>> math_function_resolver(lambda x: -0.5*x + 2, *range(1, 10))
#     [2, 1, 0, 0, 0, -1, -2, -2, -2]
#     >>>
#     >>> math_function_resolver(lambda x: 2.72**x, *range(1, 10), res_to_str=True)
#     ['3', '7', '20', '55', '149', '405', '1101', '2996', '8149']

from typing import Callable, List, Union

def math_function_resolver(
    math_func: Callable[[float], float],
    *args: Union[int, float],
    str_output: bool = False
) -> List[Union[int, str]]:

    # Вычисляем значения математической функции и округляем их до целого числа
    rounded_values = [round(math_func(x)) for x in args]

    if str_output:
        return [str(value) for value in rounded_values]

    return rounded_values

if __name__ == "__main__":
    import math

    # Пример использования для math.sin
    result_sin = math_function_resolver(
        math.sin, 0, math.pi / 2, math.pi, 3 * math.pi / 2, str_output=False
    )
    print(result_sin)  # Ожидаемый вывод: [0, 1, 0, -1]

    # Пример использования для math.cos
    result_cos = math_function_resolver(
        math.cos, 0, math.pi / 2, math.pi, 3 * math.pi / 2, str_output=True
    )
    print(result_cos)


